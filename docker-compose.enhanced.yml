version: '3.8'

services:
  # ============================================
  # Frontend Application
  # ============================================
  bg-car-frontend:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      target: production
    container_name: bg-car-platform-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - bg-car-network
    depends_on:
      - bg-car-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Backend API Server
  # ============================================
  bg-car-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bg-car-platform-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    volumes:
      - ./backend/uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - bg-car-network
    depends_on:
      - bg-car-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Database (PostgreSQL)
  # ============================================
  bg-car-database:
    image: postgres:15-alpine
    container_name: bg-car-platform-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bg_car_platform
      - POSTGRES_USER=bgcar_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bg-car-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bgcar_user -d bg_car_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Redis Cache
  # ============================================
  bg-car-redis:
    image: redis:7-alpine
    container_name: bg-car-platform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - bg-car-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Nginx Load Balancer (Optional)
  # ============================================
  bg-car-nginx:
    image: nginx:alpine
    container_name: bg-car-platform-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.loadbalancer.conf:/etc/nginx/nginx.conf:ro
      - nginx_lb_logs:/var/log/nginx
    networks:
      - bg-car-network
    depends_on:
      - bg-car-frontend
      - bg-car-backend
    profiles:
      - loadbalancer

volumes:
  postgres_data:
  redis_data:
  nginx_logs:
  backend_logs:
  nginx_lb_logs:

networks:
  bg-car-network:
    driver: bridge
